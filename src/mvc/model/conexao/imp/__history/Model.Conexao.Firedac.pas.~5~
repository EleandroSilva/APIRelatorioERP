unit Model.Conexao.Firedac;

interface

uses
  Data.DB,
  System.SysUtils,
  System.JSON,

  FireDAC.UI.Intf,
  FireDAC.FMXUI.Wait,
  FireDAC.Stan.Intf,
  FireDAC.Comp.UI,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.MySQL,
  FireDAC.VCLUI.Wait,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,

  DataSetConverter4D.Helper,
  DataSetConverter4D.Impl,

  Model.Conexao.Interfaces,
  Model.Conexao.Configuracoes.Interfaces,
  Model.Conexao.Configuracoes;

type
  TConexaoFiredac = class(TInterfacedObject, iConexao)
    private
      FConexao      : TFDConnection;
      FDriverMySQL  : TFDPhysMySQLDriverLink;
      FConfiguracao : iConexaoConfiguracoes;

      procedure LerArquivoIni;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iConexao;

      function Conexao   : TObject;
  end;


implementation


{ TConexaoFiredac }

constructor TConexaoFiredac.Create;
begin
  FConexao      := TFDConnection.Create(nil);
  FDriverMySQL  := TFDPhysMySQLDriverLink.Create(nil);
  FConfiguracao := TConexaoConfiguracoes.New;
  LerArquivoIni;
end;

destructor TConexaoFiredac.Destroy;
begin
  FreeAndNil(FConexao);
  FreeAndNil(FDriverMySQL);
  inherited;
end;

class function TConexaoFiredac.New: iConexao;
begin

end;

procedure TConexaoFiredac.LerArquivoIni;
begin

end;


function TConexaoFiredac.Conexao: TObject;
begin

end;

end.
